This is the old README of PHP-Ghetto-RPC. I began developing it 6 months ago, then stopped and now I'm coming back.

There is no functional release for now. I need to re-study the code to remember what I was doing. :P

My motivation to continue to improve this silly project is to help the PHP4 servers use code that runs only under PHP5. As of december/2010, 24% of the servers running PHP are using PHP4.

Please, if you like it, if you think it can help you in any way, or want to have some fun helping me to develop, I'll be glad to have you as a contributor in this project!

HOW IT STARTED

I was working in a company that keeps its main application developed in PHP4. After many tries to port the code to PHP5, the programmers decided to drop the idea.

One tiny piece of the system does some communication with Twitter – unfortunately, with Basic Auth. A few days after my hiring, I gave them the notice that Basic Auth was about to be shutdown and after 08/30/2010 the classes using communication with Twitter would no longer work.

So, I undertook to develop a solution to make the application work with OAuth. I thought it could be easy, but trying to port Abraham's OAuth to PHP4 would be something dumb. I tried to find a PHP4 OAuth lib, unsuccessfully. I tried to port Abraham’s OAuth to PHP4, and still didn't get what I was needing.

The solution I showed:

- Run a second Apache instance with the PHP5 module loaded. 
- Develop a simple WebService under the new Apache instance to do the interface between the application and the OAuth lib

But they didn’t like it, since they don’t have just ONE server and the application is very critical. That’s a farm and it can be very hard and risky to deploy Apache with PHP5 in every server.

Then, my boss came with a very strange idea: use PHP5’s CLI to do the job, with a front end script passing data to the command line and retrieving the result from the back end. The code rose in a structured and simple form, but due to many needs that appeared – like calling functions/methods after the data exchange (the old way was to get the entire output) – moved quickly to OOP.

HOW IT WORKS

0 - PHP-Ghetto-RPC must be included in both sides: front end and back end. It has a way to determine if it's running as a front end or a back end.

1 – PHP-Ghetto-RPC front end is instantiated in PHP4 code

2 - Developer defines the Calls and Callbacks that will be run on back end

3 – The calls are written (exported) to Persistence, a multi-dimensional array. The persistence can be:

    * a serialized file
    * memcached
    * stdin/out (planned)
    * shared memory (planned)
    * FCGI (planned)

    > Optionally, other variables, superglobals and constants are included in persistence.
    > Persistence has an unique id generated by the Bridge class. In file, id defines the filename; in Memcache, the item key.

4 – After the Persistence is exported. The PHP5 CLI is launched with the path of the PHP5 source code that will be run.

5 - PHP-Ghetto-RPC back end is instantiated

6 – The data is loaded from Persistence (imported)

7 – CallsQueue runs every Call, storing the return values in it

8 – Once the back end finishes its job, all data is written again to Persistence. The execution continues in front and and PHP-Ghetto-RPC imports the data.

9 – If Call has Callbacks, they will be called with the return values as parameters

I’m using the class as an alternative to WebServices. Note that it’s a slow, not reliable or secure alternative and must be used carefully and only if you have a lot of bravery. Absolutely experimental, despite the old version running smoothly in production. :)
